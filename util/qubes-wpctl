#!/bin/bash
#
# Control the mute status of Qubes OS VMs from command-line.
#
# Copyright (C) 2024  David Hobach  GPLv3
# version: 1.2
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# 

set -e -o pipefail

SCRIPT_NAME="${BASH_SOURCE[0]##*/}"

#workaround to make wpctl work as root, too
WPCTL="sudo -u #1000 XDG_RUNTIME_DIR=/run/user/1000 wpctl"

function usage {
  echo "$SCRIPT_NAME mute [vm]|unmute [vm]|toggle [vm]|printDefault|switchOut|switchIn|volumeOut [volume]|volumeIn [volume]

Execute the given action for the given VM (assumes pipewire in dom0 without sys-audio).

If no VM is specified, the given command is executed for all running VMs.

mute [vm]: Mute the given VM. dom0 can be used to mute the default dom0 outputs and inputs.
unmute [vm]: Unmute the given VM. dom0 can be used to unmute the default dom0 outputs and inputs.
toggle [vm]: Toggle the mute status of the given VM. dom0 can be used to toggle the default dom0 outputs and inputs.
printDefault: Print the current default audio output & input.
switchOut: Switch the the default audio output to the next available output.
switchIn: Switch the the default audio input to the next available input.
volumeOut [volume]: Set the volume of the default output to the given value.
volumeIn [volume]: Set the volume of the default input to the given value.
"
  exit 1
}

function error {
  >&2 echo "ERROR: $1"
  >&2 echo "Aborting..."
  exit 1
}

#get_ids [vm]
function get_ids {
  local vm="$1"
  local info=
  info="$($WPCTL status)" || error "Failed to execute wpctl status."

  if [[ "$vm" == "dom0" ]] ; then
    #special case: dom0 default inputs & sinks marked with a *
    local re='^.*\*[ ]*([0-9]+)\.[ ]*(.*)$'

    while IFS= read -r line || [ -n "$line" ] ; do
      if [[ "$line" =~ $re ]] ; then
        echo "${BASH_REMATCH[1]}"
      fi
    done <<< "$info"
  else
    #regular VMs

    #get the ID for the given VM
    local id_regex='^[ ]*([0-9]+)\.[ ]*([^ ]+)[ ]+.*$'
    local line id

    local found=1
    while IFS= read -r line || [ -n "$line" ] ; do
      #ignore everything until "Streams:"
      [[ "$line" == *"Streams:"* ]] && found=0
      [ $found -eq 0 ] || continue

      if [[ "$line" =~ $id_regex ]] ; then
        [[ "${BASH_REMATCH[2]}" == "$vm" ]] && echo "${BASH_REMATCH[1]}"
      fi
    done <<< "$info"
  fi
  return 0
}

function setMute {
  local cmd="$1"
  local vms="$2"
  if [[ "$cmd" == "mute" ]] ; then
    wpcmd="1"
  elif [[ "$cmd" == "unmute" ]] ; then
    wpcmd="0"
  elif [[ "$cmd" == "toggle" ]] ; then
    wpcmd="toggle"
  else
    error "Invalid command: $cmd"
  fi

  [ -z "$vms" ] && vms="$(qvm-ls --running -O NAME --raw-list | grep -Ev "^dom0$")"

  local vm=
  local errs=""
  while IFS= read -r vm || [ -n "$vm" ] ; do
    local vm_ids=
    vm_ids="$(get_ids "$vm")"
    [ -z "$vm_ids" ] && errs="$errs"$'\n'"Failed to get the ID for the VM $vm." && continue

    local id=
    while IFS= read -r id || [ -n "$id" ] ; do
      $WPCTL set-mute "$id" "$wpcmd" || errs="$errs"$'\n'"Failed to execute $wpcmd for the VM $vm on ID $id."
    done <<< "$vm_ids"
  done <<< "$vms"

  [ -n "$errs" ] && error "$errs"
  echo "${cmd}d:"
  echo "$vms"
}

function printDefault {
  local skip="${1:--1}"
  local field="${2:-2}"
  local info="$3"
  if [ -z "$info" ] ; then
    info="$($WPCTL status)" || error "Failed to execute wpctl."
  fi

  local re='^.*\*[ ]*([0-9]+)\.[ ]*(.*)$'
  local line=
  local found=1
  while IFS= read -r line || [ -n "$line" ] ; do
    if [[ "$line" =~ $re ]] ; then
      [ $skip -gt 0 ] && skip=$(( $skip -1 )) && continue
      found=0
      echo "${BASH_REMATCH[$field]}"
      [ $skip -eq 0 ] && exit $found
    fi
  done <<< "$info"
  exit $found
}

function printDefaultNice {
  local out=
  out="$(printDefault)" || error "Failed to execute wpctl."
  echo "Out: ${out/$'\n'/$'\nIn:  '}"
}

function switch {
  local info=
  info="$($WPCTL status)" || error "Failed to execute wpctl."
  local section="$1"

  #try to find the relevant section in the info
  local line
  local re='^[^0-9]*([0-9]+)\..*$'
  local foundSection=1
  local sectionContent=""
  while IFS= read -r line || [ -n "$line" ] ; do
    if [ $foundSection -eq 0 ] ; then
      [[ "$line" =~ $re ]] && sectionContent="$sectionContent"$'\n'"$line" || break
    else
      [[ "$line" == *"$section"* ]] && foundSection=0
    fi
  done <<< "$info"
  [ -z "$sectionContent" ] && error "Couldn't find the section $section inside $info. Did the wpctl output change?!"

  #get the first line and the line after the default
  local next=1
  local first=0
  local firstId=""
  local nextId=
  while IFS= read -r line || [ -n "$line" ] ; do
    [ $first -eq 0 ] && [[ $line =~ $re ]] && firstId="${BASH_REMATCH[1]}" && first=1
    [ $next -eq 0 ] && [[ $line =~ $re ]] && nextId="${BASH_REMATCH[1]}" && break
    [[ "$line" == *'*'* ]] && next=0 #default found
  done <<< "$sectionContent"

  [ -z "$nextId" ] && nextId="$firstId"
  $WPCTL set-default "$nextId"
}

function volume {
  local skip="$1"
  shift
  local curId=
  curId="$(printDefault "$skip" 1)" || error "Failed to retrieve the ID of the current default device."
  $WPCTL set-volume "$curId" "$@"
}

function main {
  [ $# -lt 1 ] && usage
  [ $# -gt 2 ] && usage

  command -v "qvm-ls" &> /dev/null || error "qvm-ls is missing."
  command -v "wpctl" &> /dev/null || error "wpctl is missing."
  command -v "sed" &> /dev/null || error "sed is missing."
  command -v "grep" &> /dev/null || error "grep is missing."
  command -v "sudo" &> /dev/null || error "sudo is missing."

  [ ! -d "/run/user/1000" ] && error "Unexpected user ID. No /run/user/1000 directory found."

  local cmd="$1"
  shift
  if [[ "$cmd" =~ ^(mute|unmute|toggle) ]] ; then
    setMute "$cmd" "$@"
  elif [[ "$cmd" == "printDefault" ]] ; then
    printDefaultNice
  elif [[ "$cmd" == "switchOut" ]] ; then
    switch "Sinks:"
  elif [[ "$cmd" == "switchIn" ]] ; then
    switch "Sources:"
  elif [[ "$cmd" == "volumeOut" ]] ; then
    volume 0 "$@"
  elif [[ "$cmd" == "volumeIn" ]] ; then
    volume 1 "$@"
  else
    error "Invalid command: $cmd"
  fi
}

main "$@"

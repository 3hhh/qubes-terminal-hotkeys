#!/bin/bash
#
# Script to simplify daily work with the Qubes OS dom0 command line (e.g. managing & starting VMs and running commands in these).
# Meant to be particularly useful with the awesome WM Meta+R key combination for executing commands in dom0.
#
# Copyright (C) 2022  David Hobach  GPLv3
# version: 2.5
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# 

#errorOut [message]
function errorOut {
>&2 echo "ERROR: $1"
>&2 echo "Aborting..."
exit 1
}

#directory of this script (hopefully...)
SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

#path to qubes-pactl
QUBES_PACTL="$SCRIPT_DIR/util/qubes-pactl"

#whether to print verbose information (0) or not (1)
VERBOSE=1

#get config
CONF="/etc/qubes-terminal-hotkeys.conf"
[ -f "/etc/qubes-terminal-hotkeys.conf" ] || CONF="$SCRIPT_DIR/qubes-terminal-hotkeys.conf"
source "$CONF" || errorOut "Failed to read the configuration $CONF."

#usage
function usage {
echo "[hotkey] [Options] [VM name or VM short name] [additional arguments]

configuration: $CONF

[hotkey]: hotkey to execute a given action as specified inside your configuration
[VM name or VM short name]: name of the VM or its short version as in your configuration; short name comparisons are always case insensitive

Options:
-v: verbose output
-h: display this help and exit

specials - action_run:
[VM name or VM short name]:
	- for template VMs always start a disposable VM using that VM as template
	- $DOM_ZERO_ID: Executes the given command in dom0.
	- no VM specified: Executes $DOM_ZERO_DEFAULT_COMMAND in dom0.
[additional arguments]: command and its arguments to execute in the given VM; if no command is specified, execute the default command for the given VM and if that one is not specified, fall back to the global default

specials - action_mute|action_unmute|action_toggle:
[VM name or VM short name]: If no VM name is specified, the action will be executed for all currently existing VMs."
}

#getRealVMName [pseudo VM name provided by the user]
#get the real name of a VM for a given pseudo name, i.e. do the mapping
#returns: the real name or nothing, if it could not be found or there was an error
function getRealVMName {
#case insensitive @associative VM array
local pseudoName=
pseudoName="$(echo "$1" | tr "[:upper:]" "[:lower:]")" || errorOut "Failed to execute tr."
local ret=""
	case "$pseudoName" in
		"")
		local ret="$DOM_ZERO_ID"
		;;

		"$DOM_ZERO_ID")
		local ret="$DOM_ZERO_ID"
		;;

		*)
		local ret="${VM_SHORT_NAMES[$pseudoName]}"
		;;
	esac

#if no mapping was done, the name provided by the user should be the real name
[ -z "$ret" ] && local ret="$1"

echo "$ret"
}

#getDefaultCommand [full VM name]
#get the default command for the given VM
#returns: the default command or nothing in case of an error
function getDefaultCommand {
local vmName="$1"
local ret=""

case "$vmName" in
		"$DOM_ZERO_ID")
			local ret="$DOM_ZERO_DEFAULT_COMMAND"
			;;

		*)
			local ret="${VM_DEFAULT_COMMANDS["$1"]}"
			#NOTE: we just check whether the key exists (it may have an empty value --> then we return that as it indicates that the VM should be started without command)
			[ ${VM_DEFAULT_COMMANDS["$1"]+_} ] || local ret="$VM_DEFAULT_COMMAND"
			;;
esac

echo "$ret"
}

#getRealCommand [full VM name] [command provided by the user]
#get the real command to execute, i.e. check whether it's empty or can be mapped and if so, return the appropriate command
#returns: the command to execute or nothing in case of an error
function getRealCommand {
local vmName="$1"
local vmCommand="$2"

if [ -n "$vmCommand" ] ; then
	#user provided something -> check whether it can be mapped and if not, just return whatever the user wrote
	local mappedCommand="${COMMANDS["$vmCommand"]}"
		if [ -n "$mappedCommand" ] ; then
			echo "$mappedCommand"
		else
			echo "$vmCommand"
		fi
	return
else
	#try to find a default
	getDefaultCommand "$vmName"
fi
}

#execDom0PreCommand [VM full name] [command] [verbose = 1/0]
#execute any pre-command for dom0 given by $DOM0_PRE_COMMANDS, if any
#sets the exit code according to the exit code of the executed command or to 0, if no command was executed
function execDom0PreCommand {
local vmName="$1"
local vmCommand="$2"
local verbose=$3

#sanity check
[ -z "$vmName" ] && errorOut "execDom0PreCommand(): No VM specified."

#get the dom0 pre-command, if any
local preCommand="${DOM0_PRE_COMMANDS["${vmName}_${vmCommand}"]}"
[ -z "$preCommand" ] && preCommand="${DOM0_PRE_COMMANDS["${vmName}"]}"

#something to execute?
if [ -n "$preCommand" ] ; then
	#verbose output
	[ $verbose -eq 0 ] && echo "Executing the pre-command (dom0): $preCommand"

	#exec & use status code
	eval "$preCommand"
	return $?
else
	return 0
fi
}

#isDvmTemplate [VM full name]
#returns: Sets a zero exit code, if and only if the given VM is a template for disposable VMs.
function isDvmTemplate {
local vm="$1"
[[ "$(qvm-prefs "$vm" "template_for_dispvms" 2> /dev/null)" == [tT]rue ]]
}

#assertRunning [vm] [start]
#Assert that the given VM is running. Will unpause paused VMs and may start shut down VMs.
#[vm]: VM for which to make sure it's running.
#[start]: If it's not running and not paused, start it (default: 0/true). If set to 1, this function will return a non-zero exit code.
#returns: A non-zero exit code, if it's not running and/or we failed to start the VM.
function assertRunning {
local vm="$1"
local start="${2:-0}"

#make sure the VM is unpaused
if qvm-check --paused "$vm" &> /dev/null ; then
	qvm-unpause "$vm" &> /dev/null || return 1
else
	if [ $start -eq 0 ] ; then
		qvm-start --skip-if-running "$vm" &> /dev/null || return 1
	else
		#we don't attempt to start
		return 2
	fi
fi

return 0
}

#execVMCommand [VM full name] [verbose = 1/0] [command] [command params]
#execute the given command on the given VM
#if no command is given, the VM is only started
#the VM full name may also be $DOM_ZERO_ID
#sets the exit code according to the exit code of the executed command
function execVMCommand {
local vmName="$1"
local verbose="$2"
local vmCommand="$3"
shift 3

#add parameters to command
for par in "$@" ; do
	printf -v vmCommand '%s %q' "$vmCommand" "$par"
done

#sanity checks
[ -z "$vmName" ] && errorOut "execVMCommand(): No VM specified."

#verbose output
[ $verbose -eq 0 ] && echo "Executing: $vmName -> $vmCommand"

#execute
case "$vmName" in
	"$DOM_ZERO_ID")
		eval "$vmCommand"
		return $?
	;;

	*)
		#check whether it's a disposable VM template
		local isDvm
		isDvmTemplate "$vmName"
		isDvm=$?

		#run the command
		if [ -z "$vmCommand" ] ; then
			if [ $isDvm -ne 0 ] ; then
				[ $verbose -eq 0 ] && echo "execVMCommand(): No command specified. --> Just starting the $vmName VM."
				assertRunning "$vmName"
				return $?
			else
				[ $verbose -eq 0 ] && echo "execVMCommand(): No command specified, but $vmName appears to be a dispVM template. --> Doing nothing."
				return 1
			fi

		else
			local addParams=""

			#starting non-dispVMs before using qvm-run seems to be the more reliable way in 4.0rc1
			if [ $isDvm -eq 0 ] ; then
				addParams="--dispvm"
			else
				assertRunning  "$vmName"
				addParams="-n"
			fi

			#in 2017-08 Marek stated that only qvm-run -p --dispvm fedora-25-dvm --service qubes.StartApp+firefox is guaranteed to wait for X for dispVMs; unfortunately it cannot take parameters --> we take the risk
			qvm-run $addParams "$vmName" "$vmCommand" < /dev/null &> /dev/null
			return $?
		fi
	;;
esac
}

#action_run [vm] [command] [command arguments]
#Executes the run action.
function action_run {
local vm="$1"
local vmCommand="$2"

#get the real VM name & command
vmCommand="$(getRealCommand "$vm" "$vmCommand")"

#execute any necessary pre-command in dom0
execDom0PreCommand "$vm" "$vmCommand" $VERBOSE || errorOut "Executing the dom0 pre-command for the VM $vm failed for some reason."

#execute
#NOTE: in the ancient version of dom0 bash, 2x shift produces something different than shift 2 (the first removes a single parameter, the latter leaves it)
shift
shift
execVMCommand "$vm" "$VERBOSE" "$vmCommand" "$@"
}

#action_mute [vm]
#Mute the given VM.
function action_mute {
local vm="$1"
[[ "$vm" == "$DOM_ZERO_ID" ]] && vm=""
"$QUBES_PACTL" "mute" "$vm"
}

#action_unmute [vm]
#Mute the given VM.
function action_unmute {
local vm="$1"
[[ "$vm" == "$DOM_ZERO_ID" ]] && vm=""
"$QUBES_PACTL" "unmute" "$vm"
}

#action_toggleMute [vm]
#Toggle the mute status of the given VM.
function action_toggleMute {
local vm="$1"
[[ "$vm" == "$DOM_ZERO_ID" ]] && vm=""
"$QUBES_PACTL" "toggle" "$vm"
}

#maction_run [vm 1] ... [vm n]
#Execute the default command for the given VMs.
function maction_run {
local vm=
declare -A pids=() #VM --> pid
for vm in "$@" ; do
	action_run "$vm" &
	pids["$vm"]=$!
done

local failed=""
local ret=
for vm in "${!pids[@]}" ; do
	wait "${pids["$vm"]}"
	ret=$?
	[ $ret -ne 0 ] && failed="$failed"$'\n'"$vm ($ret)"
done

if [ $VERBOSE -eq 0 ] ; then
	[ -z "$failed" ] || echo "The commands for the following VMs returned a non-zero exit code: $failed"
fi

#set exit code
[ -z "$failed" ]
}

#maction_start [vm 1] ... [vm n]
#Start the given VMs without executing any command.
function maction_start {
local ret=0

local vm=
declare -A pids=() #VM --> pid
for vm in "$@" ; do
	[[ "$vm" == "$DOM_ZERO_ID" ]] && continue
	[ $VERBOSE -eq 0 ] && echo "Starting: $vm"
	assertRunning "$vm" &
	pids["$vm"]=$!
done

local failed=""
local ret=
for vm in "${!pids[@]}" ; do
	wait "${pids["$vm"]}"
	ret=$?
	[ $ret -ne 0 ] && failed="$failed"$'\n'"$vm ($ret)"
done

if [ $VERBOSE -eq 0 ] ; then
	[ -z "$failed" ] || echo "Starting the following VMs failed: $failed"
fi

#set exit code
[ -z "$failed" ]
}

#maction_shutdown [vm 1] ... [vm n]
#Shut the given VMs down.
function maction_shutdown {
local shutdownDom0=1
local ret=0

if [[ "$1" == "$DOM_ZERO_ID" ]] ; then
	shutdownDom0=0
	shift
fi

if [ $# -gt 0 ] ; then
	#make sure the VMs are unpaused
	#cf. https://github.com/QubesOS/qubes-issues/issues/5967
	local vm=
	for vm in "$@" ; do
		qvm-unpause "$vm" &> /dev/null
	done

	[ $VERBOSE -eq 0 ] && echo "Shutting down: $*"
	qvm-shutdown --wait "$@"
	ret=$?
fi

if [ $shutdownDom0 -eq 0 ] && [ -n "$DOM_ZERO_SHUTDOWN" ] ; then
	[ $VERBOSE -eq 0 ] && echo "Shutting down: dom0"
	eval "$DOM_ZERO_SHUTDOWN"
	ret=$?
fi

return $ret
}

#maction_kill [vm 1] ... [vm n]
#Kill the given VMs.
function maction_kill {
local killDom0=1
local ret=0

if [[ "$1" == "$DOM_ZERO_ID" ]] ; then
	killDom0=0
	shift
fi

if [ $# -gt 0 ] ; then
	[ $VERBOSE -eq 0 ] && echo "Killing: $*"
	qvm-kill "$@"
	ret=$?
fi

if [ $killDom0 -eq 0 ] ; then
	maction_shutdown "$DOM_ZERO_ID"
	ret=$?
fi

return $ret
}

#maction_pause [vm 1] ... [vm n]
#Pause the given VMs.
function maction_pause {
local ret=0

if [[ "$1" == "$DOM_ZERO_ID" ]] ; then
	#maybe TODO: go to sleep/hibernate
	>&2 echo "WARNING: Pausing dom0 is currently not implemented. Ignoring..."
	shift
	ret=1
fi

if [ $# -gt 0 ] ; then
	[ $VERBOSE -eq 0 ] && echo "Pausing: $*"
	qvm-pause "$@"
	ret=$?
fi

return $ret
}

#maction_set_pref [preference] [value] [vm 1] ... [vm n]
#Set the given preference for the given VMs via `qvm-prefs`.
#[preference]: The preference to set, e.g. `netvm` or `audiovm`. Has to be set statically in the `qubes-terminal-hotkeys` configuration.
#[value]: The value to set the preference to. Has to be set statically in the `qubes-terminal-hotkeys` configuration. Use `--default` to reset the preference to its default value.
function maction_set_pref {
local pref="$1"
local val="$2"
local ret=0
local vm=

[ $# -lt 3 ] && errorOut "maction_set_pref: Not enough arguments! Maybe you forgot to statically set [preference] and [value] in your configuration?"
shift 2

for vm in "$@" ; do
	[ $VERBOSE -eq 0 ] && printf 'Executing "qvm-prefs %q %q %q" ... ' "$vm" "$pref" "$val"
	if qvm-prefs "$vm" "$pref" "$val" ; then
		[ $VERBOSE -eq 0 ] && echo "Success."
	else
		[ $VERBOSE -eq 0 ] && echo "Failed."
		ret=1
	fi
done

return $ret
}

function main {
local hotkey=

#parse parameters
hotkey="$(basename "$0")" || errorOut "Failed to execute basename."
[ "$hotkey" == "qubes-terminal-hotkeys" ] && usage && exit 0
while [[ "$1" == "-"* ]] ; do
	case "$1" in
		"-v")
		VERBOSE=0
		;;

		"-h")
		usage
		exit 0
		;;

		*)
		usage
		echo ""
		errorOut "Invalid option: $1"
		;;
	esac

	shift
done

#get action
local action="${HOTKEYS["$hotkey"]}"
[ -z "$action" ] && errorOut "The hotkey $hotkey is not defined inside $CONF."

#get target VMs
local arg=
vms=()
if [[ "$action" == "maction_"* ]] ; then
	for arg in "$@" ; do
		arg="$(getRealVMName "$arg")"
		#by convention, we insert dom0 at the front
		[[ "$arg" == "$DOM_ZERO_ID" ]] && vms=("$arg" "${vms[@]}") || vms+=("$arg")
		shift
	done
else
	vms+=("${1:-$DOM_ZERO_ID}")
	vms[0]="$(getRealVMName "${vms[0]}")"
	shift
fi

#execute action
$action "${vms[@]}" "$@"
}

main "$@"
